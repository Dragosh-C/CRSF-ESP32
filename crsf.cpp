#include "crsf.h"

HardwareSerial* serial_data;
uint8_t crfs_buffer[CRSF_PACKET_SIZE];
uint16_t channels[CRSF_MAX_CHANNELS];


unsigned char crc8tab[256] = {
    0x00, 0xD5, 0x7F, 0xAA, 0xFE, 0x2B, 0x81, 0x54, 0x29, 0xFC, 0x56, 0x83, 0xD7, 0x02, 0xA8, 0x7D,
    0x52, 0x87, 0x2D, 0xF8, 0xAC, 0x79, 0xD3, 0x06, 0x7B, 0xAE, 0x04, 0xD1, 0x85, 0x50, 0xFA, 0x2F,
    0xA4, 0x71, 0xDB, 0x0E, 0x5A, 0x8F, 0x25, 0xF0, 0x8D, 0x58, 0xF2, 0x27, 0x73, 0xA6, 0x0C, 0xD9,
    0xF6, 0x23, 0x89, 0x5C, 0x08, 0xDD, 0x77, 0xA2, 0xDF, 0x0A, 0xA0, 0x75, 0x21, 0xF4, 0x5E, 0x8B,
    0x9D, 0x48, 0xE2, 0x37, 0x63, 0xB6, 0x1C, 0xC9, 0xB4, 0x61, 0xCB, 0x1E, 0x4A, 0x9F, 0x35, 0xE0,
    0xCF, 0x1A, 0xB0, 0x65, 0x31, 0xE4, 0x4E, 0x9B, 0xE6, 0x33, 0x99, 0x4C, 0x18, 0xCD, 0x67, 0xB2,
    0x39, 0xEC, 0x46, 0x93, 0xC7, 0x12, 0xB8, 0x6D, 0x10, 0xC5, 0x6F, 0xBA, 0xEE, 0x3B, 0x91, 0x44,
    0x6B, 0xBE, 0x14, 0xC1, 0x95, 0x40, 0xEA, 0x3F, 0x42, 0x97, 0x3D, 0xE8, 0xBC, 0x69, 0xC3, 0x16,
    0xEF, 0x3A, 0x90, 0x45, 0x11, 0xC4, 0x6E, 0xBB, 0xC6, 0x13, 0xB9, 0x6C, 0x38, 0xED, 0x47, 0x92,
    0xBD, 0x68, 0xC2, 0x17, 0x43, 0x96, 0x3C, 0xE9, 0x94, 0x41, 0xEB, 0x3E, 0x6A, 0xBF, 0x15, 0xC0,
    0x4B, 0x9E, 0x34, 0xE1, 0xB5, 0x60, 0xCA, 0x1F, 0x62, 0xB7, 0x1D, 0xC8, 0x9C, 0x49, 0xE3, 0x36,
    0x19, 0xCC, 0x66, 0xB3, 0xE7, 0x32, 0x98, 0x4D, 0x30, 0xE5, 0x4F, 0x9A, 0xCE, 0x1B, 0xB1, 0x64,
    0x72, 0xA7, 0x0D, 0xD8, 0x8C, 0x59, 0xF3, 0x26, 0x5B, 0x8E, 0x24, 0xF1, 0xA5, 0x70, 0xDA, 0x0F,
    0x20, 0xF5, 0x5F, 0x8A, 0xDE, 0x0B, 0xA1, 0x74, 0x09, 0xDC, 0x76, 0xA3, 0xF7, 0x22, 0x88, 0x5D,
    0xD6, 0x03, 0xA9, 0x7C, 0x28, 0xFD, 0x57, 0x82, 0xFF, 0x2A, 0x80, 0x55, 0x01, 0xD4, 0x7E, 0xAB,
    0x84, 0x51, 0xFB, 0x2E, 0x7A, 0xAF, 0x05, 0xD0, 0xAD, 0x78, 0xD2, 0x07, 0x53, 0x86, 0x2C, 0xF9};



// Calculate checksum
uint8_t crc8(const uint8_t * ptr, uint8_t len)
{
  uint8_t crc = 0;
  for (uint8_t i=0; i<len; i++)
      crc = crc8tab[crc ^ *ptr++];
  return crc;
}

// Extract channels from CRSF buffer
void updateChannels() {
      channels[0] = ((crfs_buffer[3] | crfs_buffer[4] << 8) & CHANNEL_MASK);
      channels[1] = ((crfs_buffer[4] >> 3 | crfs_buffer[5] << 5) & CHANNEL_MASK);
      channels[2] = ((crfs_buffer[5] >> 6 | crfs_buffer[6] << 2 | crfs_buffer[7] << 10) & CHANNEL_MASK);
      channels[3] = ((crfs_buffer[7] >> 1 | crfs_buffer[8] << 7) & CHANNEL_MASK);
      channels[4] = ((crfs_buffer[8] >> 4 | crfs_buffer[9] << 4) & CHANNEL_MASK);
      channels[5] = ((crfs_buffer[9] >> 7 | crfs_buffer[10] << 1 | crfs_buffer[11] << 9) & CHANNEL_MASK);
      channels[6] = ((crfs_buffer[11] >> 2 | crfs_buffer[12] << 6) & CHANNEL_MASK);
      channels[7] = ((crfs_buffer[12] >> 5 | crfs_buffer[13] << 3) & CHANNEL_MASK);
      channels[8] = ((crfs_buffer[14] | crfs_buffer[15] << 8) & CHANNEL_MASK);
      channels[9] = ((crfs_buffer[15] >> 3 | crfs_buffer[16] << 5) & CHANNEL_MASK);
      channels[10] = ((crfs_buffer[16] >> 6 | crfs_buffer[17] << 2 | crfs_buffer[18] << 10) & CHANNEL_MASK);
      channels[11] = ((crfs_buffer[18] >> 1 | crfs_buffer[19] << 7) & CHANNEL_MASK);
      channels[12] = ((crfs_buffer[19] >> 4 | crfs_buffer[20] << 4) & CHANNEL_MASK);
      channels[13] = ((crfs_buffer[20] >> 7 | crfs_buffer[21] << 1 | crfs_buffer[22] << 9) & CHANNEL_MASK);
      channels[14] = ((crfs_buffer[22] >> 2 | crfs_buffer[23] << 6) & CHANNEL_MASK);
      channels[15] = ((crfs_buffer[23] >> 5 | crfs_buffer[24] << 3) & CHANNEL_MASK);
}


void init_crsf(HardwareSerial *serialPort, uint8_t rxPin = 16, uint8_t txPin = 17) {
  serial_data = &Serial1;
  serial_data->begin(BAUD_RATE, SERIAL_8N1, rxPin, txPin);
  Serial.println("Initializing CRSF...");
}


void print_channels() {
    Serial.print("Channels: ");
    for (int i = 0; i < CRSF_MAX_CHANNELS; i++) {
        Serial.print(channels[i]);
        Serial.print(" ");
    }
    Serial.println();
}

// Read CRSF packets from serial port
void read_packets(uint8_t debug = 0) {
    uint8_t data, lenght, byte_index = 0;

    while (serial_data->available() > 0) {
      data = serial_data->read();

      if (data != CRFS_ADDRESS && byte_index == 0) {
            continue; 
      } 

      if (data == CRFS_ADDRESS && byte_index == 0) {
              crfs_buffer[byte_index++] = data;
              continue;
      }

      if (byte_index == 1) {
          lenght = data;
          crfs_buffer[byte_index++] = data;
          continue;
      }

      if (byte_index == lenght + 1) {
          crfs_buffer[byte_index++] = data;
          if (data == crc8(&crfs_buffer[2], lenght - 1)) {
              crfs_buffer[byte_index++] = data;
              updateChannels();
              if (debug) {
                print_channels();
              }
          } else {
              Serial.println("CRC Error");
          }
          byte_index = 0;
          continue;
      }
      if (byte_index < CRSF_PACKET_SIZE) {
          crfs_buffer[byte_index++] = data;
      } else {
          byte_index = 0;
      }
    }
}
